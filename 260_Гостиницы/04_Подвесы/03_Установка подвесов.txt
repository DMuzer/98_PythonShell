"""
***************************************************************
*** Установка грушевидных подвесов на трубопроводы
*** "D:\18_проектирование\98_PythonShell\СОЮЗ\14_Расстановка подвесов на трубопроводов.txt"
***************************************************************
*  
***************************************************************
"""

from Autodesk.Revit import *
from Autodesk.Revit.DB import *
from contextlib import contextmanager
import math, sys
import System

lib_path = r"D:\18_проектирование\98_PythonShell"
if not lib_path in sys.path :
	sys.path.append(lib_path)
	
	
	


pi2 = math.pi * 2

dut = 0.0032808398950131233


bic = BuiltInCategory
bip = DB.Structure.StructuralType
nonstr = bip.NonStructural


import clr
from Autodesk.Revit import DB, UI
import System, sys
from System.Collections.Generic import IList, List
from imp import reload
import time
import json
dut = 0.0032808398950131233
bic = BuiltInCategory

nextDiam = {
	15 * dut : 20 * dut,
	20 * dut : 25 * dut,
	25 * dut : 32 * dut,
	32 * dut : 40 * dut,
	40 * dut : 50 * dut,
	50 * dut : 65 * dut,
	65 * dut : 80 * dut,
	80 * dut : 100 * dut,
	100 * dut : 125 * dut,
	125 * dut : 150 * dut,
	150 * dut : 200 * dut,
	200 * dut : 250 * dut,
	250 * dut : 300 * dut,
	
}

refLocations = []
for assembly in clr.References :
	refLocations.append(assembly.Location)

libFolder = r"D:\18_проектирование\98_PythonShell"
if libFolder not in sys.path :
	sys.path.append(libFolder)
	
	
libFolder2 = r"D:\18_проектирование\pyRevitExtension\DMuzer.extension\lib"
if libFolder2 not in sys.path :
	sys.path.append(libFolder2)
	
try :
	reload(dm)
	print("Перезагрузка dmRevitClasses ok")
except Exception as ex :
	print(ex)
	import dmRevitClasses as dm
	print("импорт dmRevitClasses ok")




uidoc = __revit__.ActiveUIDocument
doc = uidoc.Document
OT = UI.Selection.ObjectType

fc = FilteredElementCollector(doc).OfCategory(bic.OST_PipeFitting).WhereElementIsElementType().ToElements()



for et in fc :
	if Element.Name.GetValue(et) == "DM_Комплект крепления грушевидный R24" :
		print("Нашел")
		h_type = et
		break
		
def set_hangers(pipe) :

	pipesToDelete = []

	if type(pipe) != Plumbing.Pipe :
		return
		
	if abs(pipe.Location.Curve.Direction.Z) > 0.9 : return
		
	max_one = 800 * dut
	
	plen = pipe.Location.Curve.Length 
	if plen < max_one :
		num_supports = 1
	else :
		num_supports = int(math.ceil(plen / step) + 1)
		
	pipe_ = dm.dmElement(pipe)
		
	
	
	fstep = plen / num_supports
	
	p0 = pipe.Location.Curve.GetEndPoint(0)
	d0 = pipe.Location.Curve.Direction
	level = doc.GetElement(pipe.LevelId)
	
	
	
	msyst = pipe.MEPSystem
	
	angl = math.atan2(d0.Y, d0.X) #+ math.pi / 2
	
	
	for i in range(num_supports) :
		pos =  p0 + (0.5 + i) * fstep * d0
		
		pos = pos - XYZ.BasisZ * pipe.ReferenceLevel.Elevation
		
		print(pos)
		
		tr1 = None
		
		if not doc.IsModifiable : 	
			tr1 = Transaction(doc, "Добавление подвесов")
			tr1.Start()
		
		if not h_type.IsActive : h_type.Activate()
		
		support = doc.Create.NewFamilyInstance(pos, h_type, pipe.ReferenceLevel, nonstr)
		
		#o_sect_name = pipe.LookupParameter("О_Здание_Секция").AsString()
		#support.LookupParameter("О_Здание_Секция").Set(o_sect_name)
		support.LookupParameter("DN").Set(pipe.Diameter)
		
		support_ = dm.dmElement(support)
		support_.Set("Расстояние_до_перекрытия", 1000*dut)
		
		
		
		
		tr.Commit()
		
		rline = Line.CreateBound(pos, pos + XYZ.BasisZ)
		
		tr.Start("Adding supports to system")
		support.Location.Rotate(rline, angl)
		#msyst.Add(support.MEPModel.ConnectorManager.Connectors)
		print("т.1")
		print(support_.connectorsDict)
		
		c1 = support_.connectorsDict[1]
		print("т.2")
		pnt1 = c1.Origin
		pnt2 = pnt1 + c1.CoordinateSystem.BasisZ
		l2 = Line.CreateBound(pnt1, pnt2)
		pipe2 = pipe_.copy()
		pipe2.Location.Curve = l2
		
		c2 = pipe2.connectorsDict[0]
		c2.ConnectTo(c1)
		
		pipesToDelete.append(pipe2)
		
		
		
		if tr1 : tr1.Commit()
	for pipe2 in pipesToDelete :
		pipe2.delete()
		

		
		
step = 2000 * dut
#min_len = 300 * dut
max_one = 800 * dut
tr = Transaction(doc)

tr.Start("Добавление подвесов")


while True :
	try :
		pipe_ids = uidoc.Selection.PickObjects(OT.Element)
	except :
		break
		
	for pipe_id in pipe_ids :
		pipe = doc.GetElement(pipe_id)
		set_hangers(pipe)
		
tr.Commit()
	

		
		
		