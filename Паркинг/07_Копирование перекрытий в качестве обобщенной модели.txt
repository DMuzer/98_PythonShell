"""
***************************************************************
*** Копирование перекрытий из архитектуры и создание геометрии
*** как Direct Shape
***************************************************************
* 
***************************************************************
"""
dut = 0.0032808398950131233

view_name = 'DM_ОТМЕТКИ'
margin_rel = False
margin = 200 * dut



from Autodesk.Revit import *
from Autodesk.Revit.DB import *
from contextlib import contextmanager
import math, sys
import clr
import System

clr.AddReferenceToFileAndPath(r"C:\Users\Дмитрий\NetTopologySuite.2.4.0\lib\netstandard2.0\NetTopologySuite.dll")
clr.AddReferenceToFileAndPath(r"C:\Program Files\Autodesk\Revit 2021\RevitAPIIFC.dll")
import NetTopologySuite as nts
import NetTopologySuite.Geometries as nts_geom
from Autodesk.Revit.DB import IFC as ifc

lib_path = r"D:\18_проектирование\98_PythonShell"
if not lib_path in sys.path :
	sys.path.append(lib_path)
	
import dm_connect_2 as dm
import dm_nearest_geometry as dm1
import dm_connect_3 as dm3

reload(dm)	
reload(dm1)
reload(dm3)

pi2 = math.pi * 2

dut = 0.0032808398950131233
	
bic = BuiltInCategory
bip = DB.Structure.StructuralType
nonstr = bip.NonStructural
OT = UI.Selection.ObjectType

uidoc = __revit__.ActiveUIDocument
doc = uidoc.Document

mapp = dm.dmApp(doc)

floors = []
levels = set()
l_lines = []

trans = Transaction(doc)
trans.Start("Вставка перекрытий")

for lf in mapp.linked_files :
	print(lf)
	print(lf.Name)
	ldoc = lf.GetLinkDocument()
	print(ldoc)
	if not ldoc :
		print("Не загружен документ, пропускаем")
		continue

	ttrans = lf.GetTotalTransform()


	fc = FilteredElementCollector(ldoc).OfCategory(bic.OST_Floors).ToElements()

	if len(fc) == 0 : 
		continue
	print("Количество элементов {}".format(len(fc)))

	
	for floor in fc :
		try :
			g = floor.Geometry[Options()]
			g = g.GetTransformed(ttrans)
			
			ds = dm.create_ds(g)
			try :
				ds.LookupParameter("DM_Тип_Обобщенной_модели").Set("Перекрытие")
			except Exception as ex:
				print("Не получилось установить значение типа модели")
				print(ex)


		except Exception as ex:			
			pass
			
trans.Commit()
print(20*"-")




	

	
	
