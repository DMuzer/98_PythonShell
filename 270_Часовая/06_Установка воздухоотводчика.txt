#Установка воздухоотводчика
import Autodesk.Revit.UI as UI
import Autodesk.Revit.DB as DB
import re
import math
import clr
import System
import sys
from imp import reload
from System.Collections.Generic import IList, List

dut = 0.0032808398950131233
#dut = DB.UnitUtils.ConvertToInternalUnits(1, DB.DisplayUnitType.DUT_MILLIMETERS)
bic = DB.BuiltInCategory

libFolder2 = r"D:\18_проектирование\pyRevitExtension\DMuzer.extension\lib"
if libFolder2 not in sys.path :
	sys.path.append(libFolder2)
	
try :
	reload(dm)
	print("Перезагрузка dmRevitClasses ok")
except Exception as ex :
	print(ex)
	import dmRevitClasses as dm
	print("импорт dmRevitClasses ok")
	


copy_element_id = ElementId(9692643)
#copy_element_id = ElementId(10066506)

def get_origin(e) :
	for c in e.MEPModel.ConnectorManager.Connectors :
		if c.CoordinateSystem.BasisZ.Z < 0.99 :
			return c

def airvent_hor_pipe(pipe, pnt) :
	pipe_ = dm.dmElement(pipe)
	lc = pipe.Location.Curve	
	av = uidoc.ActiveView

	
	lc2 = Line.CreateUnbound(pnt, av.ViewDirection)
	
	res = dm.computeClosestPoint(lc, lc2, False, False)
	
	pt1 = res.Item[0].XYZPointOnFirstCurve
	print(pt1)
	
	p0 = pt1
	p1 = p0 + XYZ.BasisZ * 0.3
	
	tr = None
	if not doc.IsModifiable :
		tr = Transaction(doc, "Создание воздухоотводчика")
		tr.Start()
	
	airVent = doc.Create.NewFamilyInstance(p1, type, DB.Structure.StructuralType.NonStructural)
	airVent = dm.dmElement(airVent)
		
	if tr : tr.Commit()
	
	
	
	c = next(airVent.connectors)
	p00, d0 = c.Origin, c.Radius * 2

	l2 = Line.CreateBound(p0, p00)
	
	
	with Transaction(doc, "Подключение воздухоотводчика") as tr:
		tr.Start()

		pipe2 = pipe_.copy()
		pipe2.Location.Curve = l2
		pipe2.diameter = d0
		
		cd = pipe2.connectorsDict
		cp0, cp1 = cd[0], cd[1]
		
		doc.Create.NewTakeoffFitting(cp0, pipe)
		c.ConnectTo(cp1)
		
		tr.Commit()
		
def drain_vert_pipe(pipe) :
	pass

	bvalve = doc.GetElement(copy_element_id)
	bcon = [c for c in bvalve.MEPModel.ConnectorManager.Connectors if c.CoordinateSystem.BasisZ.Z > 0.95][0]
	
	av = uidoc.ActiveView

	tr = Transaction(doc)
	tr.Start("and work plane")	
	plane1 = Plane.CreateByNormalAndOrigin(av.Origin, av.ViewDirection)
	sk_plane = SketchPlane.Create(doc, plane1)
	av.SketchPlane = sk_plane
	
	tr.Commit()
	
	
	
	pnt = uidoc.Selection.PickPoint()
	print(pnt)
	lc = pipe.Location.Curve
	
	lc2 = Line.CreateUnbound(pnt, av.ViewDirection)
	
	t = clr.Reference[IList[ClosestPointsPairBetweenTwoCurves]](List[ClosestPointsPairBetweenTwoCurves]())
    
	lc.ComputeClosestPoints(lc2, True, False, False, t)
	pt1 = t.Item[0].XYZPointOnFirstCurve
	print(pt1)
	

	p0 = pt1
	p1 = pt1 - XYZ.BasisY * 0.3
	p2 = p1 - XYZ.BasisZ * 0.2
	
	dp01 = p2 - bcon.Origin
	
	
	
	
	l1 = Line.CreateBound(p0, p1)
	l2 = Line.CreateBound(p1, p2)
	
	tr = Transaction(doc)
	tr.Start("Add drain valve")
	valve2 = doc.GetElement(ElementTransformUtils.CopyElement(doc, copy_element_id,dp01)[0])
	
	pipe1 = doc.GetElement(ElementTransformUtils.CopyElement(doc, pipe.Id, XYZ.Zero)[0])
	pipe2 = doc.GetElement(ElementTransformUtils.CopyElement(doc, pipe.Id, XYZ.Zero)[0])
	
	pipe1.Location.Curve = l1
	pipe1.Parameter[BuiltInParameter.RBS_PIPE_DIAMETER_PARAM].Set(15 * dut)
	c11 = min([c for c in pipe1.ConnectorManager.Connectors], key = lambda x : x.Origin.DistanceTo(p0))
	c12 = min([c for c in pipe1.ConnectorManager.Connectors], key = lambda x : x.Origin.DistanceTo(p1))
	
	pipe2.Location.Curve = l2
	pipe2.Parameter[BuiltInParameter.RBS_PIPE_DIAMETER_PARAM].Set(15 * dut)
	c21 = min([c for c in pipe2.ConnectorManager.Connectors], key = lambda x : x.Origin.DistanceTo(p1))
	c22 = min([c for c in pipe2.ConnectorManager.Connectors], key = lambda x : x.Origin.DistanceTo(p2))
	
	doc.Create.NewTakeoffFitting(c11, pipe)
	doc.Create.NewElbowFitting(c12, c21)
	
	c3 = [c_ for c_ in valve2.MEPModel.ConnectorManager.Connectors if c_.CoordinateSystem.BasisZ.Z >0.99][0]
	
	c22.ConnectTo(c3)
	
	tr.Commit()
	

version = __revit__.Application.VersionNumber
familyNames = {
	"2021" : "DM_Узел воздухоотводчика_R21",
	"2022" : "DM_Узел воздухоотводчика_R22",
	"2023" : "DM_Узел воздухоотводчика_R23",
	"2024" : "DM_Узел воздухоотводчика_R24",	
	}
airVentType = familyNames[version]
types = {t.Name : t for t in FilteredElementCollector(doc)\
			.OfCategory(bic.OST_PipeAccessory)\
			.WhereElementIsElementType().ToElements()}
			
type = types[airVentType]

if not type.IsActive :
	tr = None
	if not doc.IsModifiable : 
		tr = Transaction(doc, "Активация узла")
		tr.Start()
	type.Activate()
	tr.Commit()
	
while True :
	ref = uidoc.Selection.PickObject(UI.Selection.ObjectType.Element)
	pipe, pnt = doc.GetElement(ref), ref.GlobalPoint
	print(pipe)
	d = pipe.Location.Curve.Direction
	if abs(d.Z) < 0.6 :
		airvent_hor_pipe(pipe, pnt)
	else :
		drain_vert_pipe(pipe)