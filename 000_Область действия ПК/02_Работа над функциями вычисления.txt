# Стандарный код для импортов
import clr
from Autodesk.Revit import DB, UI
import System, sys
from imp import reload
import time
import json
dut = 0.0032808398950131233
bic = BuiltInCategory

refLocations = []
for assembly in clr.References :
	refLocations.append(assembly.Location)

libFolder = r"D:\18_проектирование\98_PythonShell"
if libFolder not in sys.path :
	sys.path.append(libFolder)
	
	
libFolder2 = r"D:\18_проектирование\pyRevitExtension\DMuzer.extension\lib"
if libFolder2 not in sys.path :
	sys.path.append(libFolder2)
	
try :
	reload(dm)
	print("Перезагрузка dmRevitClasses ok")
except Exception as ex :
	print(ex)
	import dmRevitClasses as dm
	print("импорт dmRevitClasses ok")
	
try :
	reload(dmDoc)
	print("Перезагрузка dmRevitDoc ok")
except Exception as ex :
	print(ex)
	import dmRevitDoc as dmDoc
	print("импорт dmRevitDoc ok")

from importlib import reload
import dmNTS
reload(dmNTS)

import dmCalcVisibility
reload(dmCalcVisibility)

import dmRoomModule as dmR
reload(dmR)

dmDoc = dmR.DmDoc(doc)

pnt = uidoc.Selection.PickPoint()
z = uidoc.ActiveView.GenLevel.ProjectElevation + 1200*dut
pnt = XYZ(pnt.X, pnt.Y, z)

room = dmDoc.findRoomByPointInAllLinks(pnt)

roomBnd = room.getRoomContour()
pgRoomBoundary = dmNTS.getCurveLoopsAsNTSPolygon(roomBnd)

origin = (pnt.X, pnt.Y)

def shortestSegment(lr) :
	c= list(lr.Coordinates)
	return min([(c[i].Distance(c[i+1]), i) for i in range(len(c)-1)])
def getEndDistance(lr) :
	c = list(lr.Coordinates)
	return c[0].Distance(c[-1])

def analyzePolygon(pg) :
	print("количество точек в полигоне  {}".format(len(pg.Coordinates)))
	print("количество контуров в полигоне  {}".format(pg.Boundary.NumGeometries))
	print("количество дырок  {}".format(len(pg.Holes)))
	print("количество точек во внешней границе {}".format(len(pg.ExteriorRing.Coordinates)))	
	print("минимальная длина сегмента внешней границы {}".format(shortestSegment(pg.ExteriorRing)))
	print("расстояние между первой и последней точкой контура {}".format(getEndDistance(pg.ExteriorRing)))
	for num, lr in enumerate(pg.InteriorRings) :
		print("количество точек границе дырки {} - {}".format(num, len(lr.Coordinates)))
		print("минимальная длина сегмента внутренней границы {} {}".format(num, shortestSegment(lr)))

"""
analyzePolygon(pg)

cls = dmNTS.getNTSPolygonAsCurveLoops(pg)
dmNTS.create_filled_region(cls)
import NetTopologySuite as nts

#dmNTS.draw_nts_geometry(doc, pg2)

print(nts.Operation.Valid.IsValidOp(pg).IsValid)
#sym = nts.Simplify.DouglasPeuckerSimplifier(pg) 
sym = nts.Simplify.TopologyPreservingSimplifier(pg) 
pg2 = sym.Simplify(pg, 0.05)
cls2 = dmNTS.getNTSPolygonAsCurveLoops(pg2)
dmNTS.create_filled_region(cls2)
analyzePolygon(pg2)

"""
vc = dmCalcVisibility.dmVisibilityCalculator(origin, pgRoomBoundary, 20000*dut)
vc.calc_recursive()
vc.calc_total_coverage_polygon()
vc.draw_total_coverage_polygon()






"""
for num, pg in enumerate(vc.totalCoverage.Geometries) :
	try :
		l = dmNTS.getNTSPolygonAsCurveLoops(pg)
		print(dmNTS.create_filled_region(l).Id)
	except :
		print("Ошибка {}".format(num))
	
		pass
"""




	
	
	




	
