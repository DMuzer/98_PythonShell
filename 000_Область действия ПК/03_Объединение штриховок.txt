# Стандарный код для импортов
import clr
from Autodesk.Revit import DB, UI
import System, sys
from imp import reload
import time
import json
dut = 0.0032808398950131233
bic = BuiltInCategory

refLocations = []
for assembly in clr.References :
	refLocations.append(assembly.Location)

libFolder = r"D:\18_проектирование\98_PythonShell"
if libFolder not in sys.path :
	sys.path.append(libFolder)
	
	
libFolder2 = r"D:\18_проектирование\pyRevitExtension\DMuzer.extension\lib"
if libFolder2 not in sys.path :
	sys.path.append(libFolder2)
	
try :
	reload(dm)
	print("Перезагрузка dmRevitClasses ok")
except Exception as ex :
	print(ex)
	import dmRevitClasses as dm
	print("импорт dmRevitClasses ok")
	
try :
	reload(dmDoc)
	print("Перезагрузка dmRevitDoc ok")
except Exception as ex :
	print(ex)
	import dmRevitDoc as dmDoc
	print("импорт dmRevitDoc ok")

from importlib import reload
import dmNTS
reload(dmNTS)

import dmCalcVisibility
reload(dmCalcVisibility)

import dmRoomModule as dmR
reload(dmR)
import itertools
import NetTopologySuite as nts

#hatches = [e for e in dm.getSelection() if isinstance(e.e, FilledRegion)]
def shortestSegment(lr) :
	c= list(lr.Coordinates)
	return min([(c[i].Distance(c[i+1]), i) for i in range(len(c)-1)])
	
def getEndDistance(lr) :
	c = list(lr.Coordinates)
	return c[0].Distance(c[-1])
	


def analyzePolygon(pg) :
	if pg.GeometryType == 'MultiPolygon' :
		print("Это мультиполигон")
		print("Количество полигонов {}".format(len(pg.Geometries)))
		print("IsValid = {}".format(pg.IsValid))
		for num, pg1 in enumerate(pg.Geometries) :
			print(20*"*")
			print("№{}".format(num))
			analyzePolygon(pg1)
			print(20*"*")
		return
	print("количество точек в полигоне  {}".format(len(pg.Coordinates)))
	print("количество контуров в полигоне  {}".format(pg.Boundary.NumGeometries))
	print("количество дырок  {}".format(len(pg.Holes)))
	print("количество точек во внешней границе {}".format(len(pg.ExteriorRing.Coordinates)))	
	print("минимальная длина сегмента внешней границы {}".format(shortestSegment(pg.ExteriorRing)))
	print("расстояние между первой и последней точкой контура {}".format(getEndDistance(pg.ExteriorRing)))
	for num, lr in enumerate(pg.InteriorRings) :
		print("количество точек границе дырки {} - {}".format(num, len(lr.Coordinates)))
		print("минимальная длина сегмента внутренней границы {} {}".format(num, shortestSegment(lr)))
		print("расстояние между первой и последней точкой контура {}".format(getEndDistance(lr)))



def simplify(mpg, d) :
	mpg = mpg.Buffer(-0.05).Buffer(0.1).Buffer(-0.05)
	return nts.Simplify.TopologyPreservingSimplifier(mpg).Simplify(mpg, d)

	if mpg.GeometryType == 'Polygon' :
		mpg = [mpg]
		
	res = []
	for pg in mpg :
		if pg.GeometryType == 'Polygon' :
			pg1 = nts.Simplify.TopologyPreservingSimplifier(pg).Simplify(pg, 0.1)
			res.append(pg1)
	if len(res) == 1 : return res[0]
	
	return nts.Geometries.MultiPolygon(System.Array[nts.Geometries.Polygon](res))
			
		
		
		


polygons = [dmNTS.getCurveLoopsAsNTSPolygon(e.e.GetBoundaries()) for e in hatches]

polygons_mod = []

for pg in polygons :
	#sm = nts.Simplify.TopologyPreservingSimplifier(pg)
	#pg2 = sm.Simplify(pg, 0.05)
	polygons_mod.append(pg)
	#dmNTS.create_filled_region(pg)
	

polygons_one = []

for pg1 in polygons_mod :
	print("---")
	pg3 = pg1
	for pg2 in polygons_mod :
		if not pg1 is pg2 :
			print(1)	
					
			pg3 = pg3.Difference(pg2)
			pg3 =simplify(pg3, 0.1)
			
	polygons_one.append(pg3)
	print(pg3.IsValid)
	#analyzePolygon(pg3)
	pg3 =simplify(pg3.Buffer(-0.05).Buffer(0.1).Buffer(-0.05), 0.1)
	#analyzePolygon(pg4)
	dmNTS.create_filled_region(pg3)	
	
pg1 = polygons_mod[0]
for pg2 in polygons_mod[1:] :
	pg1 = pg1.Union(pg2)
	
for pg2 in polygons_one :
	try :
		pg1 = pg1.Difference(pg2)
	except :	
		pg1 = simplify(pg1, 0.1)
		try :
			pg1 = pg1.Difference(pg2)
		except :
			pg2 = simplify(pg2, 0.1)
			pg1 = pg1.Difference(pg2)
			
		
	
pg1 = simplify(pg1, 0.1)

dmNTS.create_filled_region(pg1)
	
	
	
	
"""	
LINESTRING (-100.48731000510604 -33.271008842809522, -99.893498962405772 -27.210001718989588) 
LINESTRING (-100.48731000510602 -33.271008842809493, -100.48731000510604 -33.271008842809508) 

[(-100.48731000510604, -33.271008842809508, NaN) ]

"""

