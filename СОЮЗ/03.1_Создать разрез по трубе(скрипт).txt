"""
***************************************************************
*** Создание разреза по трубе
*** 
***************************************************************
* 
*
***************************************************************
"""
from Autodesk.Revit import *
from Autodesk.Revit.DB import *
import Autodesk.Revit.UI as UI
import math
uidoc = __revit__.ActiveUIDocument
doc = uidoc.Document
dut = 0.0032808398950131233

def get_working_section_type(along = True) :
	#along -True - находит тип для сечения вдоль трубы
	#along - False - находит тип для сечения поперек трубы
	#Выбираем все типы видов
	fc = FilteredElementCollector(doc).OfClass(ViewFamilyType)
	#Выбираем все сечения
	fc2 = list(FilteredElementCollector(doc).OfClass(ViewSection))
	
	for e in fc2[::-1] :
		vt_id = e.GetTypeId()
		if vt_id != ElementId.InvalidElementId :
			last_type = doc.GetElement(vt_id)
			break
	#Выбираем последний созданный
	lname = Element.Name.GetValue(last_type)		
	#print("Последний использованный {}".format(lname))
			
	view_types = set()
	
	
	for e in fc :
		#print(type(e))
		if not e.ViewFamily == ViewFamily.Section :
			#print("Это не сечение")
			continue
		#print(Element.Name.GetValue(e))
		view_types.add(e)
		
	#print(view_types)
	
	along_name = "Разрез_ПТ_Рабочий_вдоль трубы"
	across_name = "Разрез_ПТ_Рабочий_поперек трубы"
	res = None
	for e in view_types :
		tname = Element.Name.GetValue(e)
		if (((tname == along_name) and along) or
				((tname == across_name and not along))):
			res = e
			
	#print("Найдено {}".format(t))
	
	if not res :
		res = last_type
		
	if not res :
		pass
	return res
	
def get_new_number() :
	fc = FilteredElementCollector(doc).OfClass(ViewSection).ToElements()

	nums = [0]
	for e in fc :
		if e.Name.Contains("Разрез по трубе") :
			
			n = e.Name
			num1 = n.split(" ")[-1]
			try :
				nums.append(int(num1))
			except :
				pass
				
	new_num = max(nums) + 1
	return new_num


ot = UI.Selection.ObjectType
pipe_id = uidoc.Selection.PickObject(ot.Element)
pipe = doc.GetElement(pipe_id)
lc = pipe.Location.Curve
p1 = lc.GetEndPoint(0)
p2 = lc.GetEndPoint(1)
d = lc.Direction
d = XYZ(d.X, d.Y, 0).Normalize()

level = pipe.ReferenceLevel

elevation = level.Elevation

bottom = elevation - 1000 * dut
top = max(p1.Z, p2.Z) + 1000 * dut 

w = (p2 - p1).GetLength() * 1.3 + 5000 * dut
h = top - bottom

rot_trans = Transform.CreateRotation(XYZ.BasisZ, -math.pi / 2)
dn = rot_trans.OfVector(d)

pntMin = XYZ(-w / 2, -h / 2, -1)
pntMax = XYZ(w  / 2 ,  h / 2, 1)

origin = XYZ((p2.X+p1.X)*0.5, (p2.Y+p1.Y)*0.5, (top+bottom) * 0.5)

viewTransform = Transform.Identity
viewTransform.BasisZ = dn.Normalize()
viewTransform.BasisX = d
viewTransform.BasisY = XYZ.BasisZ
viewTransform.Origin = origin


bb = BoundingBoxXYZ()
bb.Min = pntMin
bb.Max = pntMax 
bb.Enabled = True 

bb.Transform = viewTransform

vt_id = get_working_section_type(True).Id
#ElementId(4517251)
tr = Transaction(doc)
tr.Start("add new pipe section")
new_view = ViewSection.CreateSection(doc, vt_id, bb)
new_number = get_new_number()
new_view.Name = "Разрез по трубе {}".format(new_number)

tr.Commit()
uidoc.ActiveView = new_view
__window__.Close()