# Построение эшелонов и запись в БД
import clr
from Autodesk.Revit import DB, UI
import System, sys
from imp import reload
import time
import json
dut = 0.0032808398950131233
refLocations = []
for assembly in clr.References :
	refLocations.append(assembly.Location)
bufsPath = r"C:\Users\Дмитрий\System.Buffers.4.4.0\lib\netstandard2.0\System.Buffers.dll"
if not bufsPath in refLocations :
	clr.AddReferenceToFileAndPath(bufsPath)
ntsPath = r"C:\Users\Дмитрий\nettopologysuite.2.5.0\lib\netstandard2.0\NetTopologySuite.dll"
if not ntsPath in refLocations :
	clr.AddReferenceToFileAndPath(ntsPath)
	
import NetTopologySuite as nts
#from NetTopologySuite.Geometries import *
import NetTopologySuite.Geometries as geoms

libFolder = r"D:\18_проектирование\98_PythonShell"
if libFolder not in sys.path :
	sys.path.append(libFolder)
	
qs1 = """
            SELECT rowid,
            Plan_code,
                Plan_name,
                Level_name
            FROM PLANS
            WHERE Plan_name = 'Имя плана1';
        """
	
try :
	reload(dm)
	print("Перезагрузка dmFindRoute2 ok")
except Exception as ex :
	print(ex)
	import dmFindRoute2 as dm
	print("импорт dmFindRoute2 ok")
	#raise
	
libFolder2 = r"D:\18_проектирование\pyRevitExtension\DMuzer.extension\lib"
if libFolder2 not in sys.path :
	sys.path.append(libFolder2)
	
try :
	reload(dm2)
	print("Перезагрузка dmRevitClasses ok")
except Exception as ex :
	print(ex)
	import dmRevitClasses as dm2
	print("импорт dmRevitClasses ok")
	
try :
	reload(dm3)
	print("Перезагрузка dm_connect_2 ok")
except Exception as ex :
	print(ex)
	import dm_connect_2 as dm3
	print("импорт dm_connect_2 ok")
	#raise
	
	


typeId = ElementId(6036810)
views = {v.Name : v  for v in FilteredElementCollector(doc).OfClass(View).ToElements()}
#workPlan = views["Р_ВПВ_Транзиты Этаж -2 E1-E2-E3 3200-3380"]
workPlan = views["В_Этаж 01_Водопровод_Противопожарный"]
#workPlan = uidoc.ActiveView
targetView = views["План1"]
viewRange 			= workPlan.GetViewRange()

dmDoc 				= dm.dmDocument(doc)

tt1		= time.time()

solids 		= []
elements 	= []

	
opt = Options()

eshelons = {}
eDicts = {}
viewRange 			= workPlan.GetViewRange()
bottomElevation 	= workPlan.GenLevel.Elevation 
centerElevation = bottomElevation + 2650 * dut
height = 180 * dut	
print("цикл")

tr = Transaction(doc, "1")
tr.Start()
for i in range(500,3990, 25) :

	centerElevation = bottomElevation +  i * dut
	levelElevation = round((centerElevation - bottomElevation) / dut)
	print(levelElevation)
	#if centerElevation / dut > 4000 : break
	eshelon = dm.dmSectionLevelCreation(
		doc = doc,
		centerElevation = centerElevation,
		height = height,
		view = workPlan
		)
	#eshelons[centerElevation] = eshelon
	
	"""
		
	pg 			= geoms.Polygon.Empty
	pgDuct 		= eshelon.calcDuctPolygon()
	
	pgPipe 		= eshelon.calcPipePolygon()
	pgElectrical = eshelon.calcElectricalPolygon()
	pgArch 		= eshelon.calcArchPolygon()

	pg 			= pgDuct.Union(pgPipe).Union(pgElectrical).Union(pgArch).Buffer(-2*dut).Buffer(4*dut).Buffer(-2*dut)
	pg 			= pg.Buffer(150 * dut)
	

	
	ds = dm.create_ds_safe(pg, doc)
	
	ds.Location.Move(XYZ(0,0, centerElevation))
	
	"""
	
	
	eshelon.writeToDb()

tr.Commit()
tt2 = time.time()
print("Время выполнения {}".format(tt2-tt1))
raise

"""
dm.drawPolygonAsFilledRegion(
	pg, 
	doc, 
	uidoc.ActiveView
	)
"""

plans = {workPlan.Name : 
	{"name" : workPlan.Name,
	"data" : eDicts}}

models = {doc.PathName : plans}


fn = ".".join(doc.PathName.Split("\\")[-1].split(".")[:-1]) + '.json'
fld = "\\".join(doc.PathName.Split("\\")[:-1])
fname = fld + "\\" + fn

"""
with open(fn, "w") as f :
	
	json.dump(models, f, indent = 4)
"""

#Получаем геометрию трубы
pipeId = ElementId(1096631)
pipeId = uidoc.Selection.GetElementIds()[0]
pipe = doc.GetElement(pipeId)

lc = pipe.Location.Curve

p0 = lc.GetEndPoint(0)
p1 = lc.GetEndPoint(1)
z = p0.Z
coords = [geoms.Coordinate(p.X, p.Y) for p in [p0, p1]]

ls = geoms.LineString(System.Array[geoms.Coordinate](coords))

#Надо найти нужный эшелон
workEshelon = min(eshelons.values(), key = lambda x : abs(x.centerElevation - z))

sEshelons = sorted(eshelons.values(), key = lambda x : abs(x.centerElevation - z))


pg 			= geoms.Polygon.Empty
pgDuct 		= workEshelon.ductPolygon

pgPipe 		= workEshelon.pipePolygon
pgElectrical = workEshelon.electricalPolygon
pgArch 		= workEshelon.archPolygon

#pg 			= pgDuct.Union(pgPipe).Union(pgElectrical).Union(pgArch)
#pg = pgArch
pg 			= pgDuct.Union(pgPipe).Union(pgElectrical).Union(pgArch).Buffer(-2*dut).Buffer(4*dut).Buffer(-2*dut)
pg 			= pg.Buffer(150 * dut)

workPg = eshelon.eshelonPolygon.Difference(pg)

ds = dm.create_ds_safe(workPg, doc, XYZ(0,0,z))

#вычисляем пересечения трубы с рабочим полигоном

dmPipe1 = dm2.dmElement(pipe)

pipeIntersection = ls.Intersection(workPg)
pipeExclude = ls.Difference(workPg)
ds1 = dm.create_ds_safe(pipeIntersection, doc, XYZ(0,0,z))
ds2 = dm.create_ds_safe(pipeExclude, doc, XYZ(0,0,z))

if pipeIntersection.NumGeometries > 1 :
	print("Геометрии пересекаются")
newPipes = []
if pipeExclude :
	for c1 in pipeExclude.Coordinates :
		p0 = XYZ(c1.X, c1.Y, z)
		p = lc.Project(p0).XYZPoint
		newPipe = dmPipe1.breakPipe(p)
		newPipes.append(newPipe)
		
newPipes.append(dmPipe1)
		
found = False
for nextEshelon in sEshelons :
	z3 = nextEshelon.centerElevation
	dz = z3-z
	if abs(dz) < 3.1 * 150 * dut : continue
	freePg = nextEshelon.getFreePolygon(150 * dut)
	nextEshelonExclude = pipeExclude.Difference(freePg)
	if nextEshelonExclude.IsEmpty :
		#Значит полностью линия проходит и эшелон подходит
		found = True
		break

		
if found :
	print("Нашли!")
	z3 = nextEshelon.centerElevation
	ds3 = dm.create_ds_safe(pipeExclude, doc, XYZ(0,0,z3))
	dz = z3-z
	
	tr = Transaction(doc,"Перемещение сегмента трубы")
	tr.Start()
	newPipes[1].e.Location.Move(XYZ(0,0, dz))
	tr.Commit()
	
	
	
	
	




	