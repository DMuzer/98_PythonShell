# Работа с эшелонами считываем из файла
from Autodesk.Revit import DB, UI
import System, sys
from imp import reload
import time
import json
dut = 0.0032808398950131233
clr.AddReferenceToFileAndPath(r"C:\Users\Дмитрий\System.Buffers.4.4.0\lib\netstandard2.0\System.Buffers.dll")
clr.AddReferenceToFileAndPath(r"C:\Users\Дмитрий\nettopologysuite.2.5.0\lib\netstandard2.0\NetTopologySuite.dll")
import NetTopologySuite as nts
from NetTopologySuite.Geometries import *
import NetTopologySuite.Geometries as geoms

libFolder = r"D:\18_проектирование\98_PythonShell"
if libFolder not in sys.path :
	sys.path.append(libFolder)
	
try :
	reload(dm)
	print("Перезагрузка dmFindRoute2 ok")
except Exception as ex :
	print(ex)
	import dmFindRoute2 as dm
	print("импорт dmFindRoute2 ok")	
	
libFolder2 = r"D:\18_проектирование\pyRevitExtension\DMuzer.extension\lib"
if libFolder2 not in sys.path :
	sys.path.append(libFolder2)
	
try :
	reload(dm2)
	print("Перезагрузка dmRevitClasses ok")
except Exception as ex :
	print(ex)
	import dmRevitClasses as dm2
	print("импорт dmRevitClasses ok")
	
try :
	reload(dm3)
	print("Перезагрузка dm_connect_2 ok")
except Exception as ex :
	print(ex)
	import dm_connect_2 as dm3
	print("импорт dm_connect_2 ok")
	
	
def drawPolygonAsFilledRegion(pg) :
	tr = None
	if not tr :
		tr = Transaction(doc, "create filled region")
		tr.Start()
		
	cls = dm3.get_CurveLoopsFromPolygon(pg)
	try :
		fr = FilledRegion.Create(doc, typeId, uidoc.ActiveView.Id, cls)
	except Exception as ex:
		print(ex)
		pg = pg.Buffer(-20 * dut).Buffer(20 * dut)
		cls = dm3.get_CurveLoopsFromPolygon(pg)
		fr = FilledRegion.Create(doc, typeId, uidoc.ActiveView.Id, cls)
		pass
		
	
	if tr : tr.Commit()
	return fr
	

excludeIds = [8900694, 2613213, 2613847, 2613883, 2613919, 2613955, 2613991, 2614027,
	2614063, 2614099, 2626423, 2630012, 2632819, 2638570, 2639485, 2640400, 2648760, 2711124, 2711469,
	3101063, 3101385, 3101744,  3101806, 3101883, 3102562,  3102612, 3103138, 3865769 ]
typeId = ElementId(6036810)
views = {v.Name : v  for v in FilteredElementCollector(doc).OfClass(View).ToElements()}
#workPlan = views["Р_ВПВ_Транзиты Этаж -2 E1-E2-E3 3200-3380"]
workPlan = views["В_Этаж 01_Водопровод_Противопожарный"]
#workPlan = uidoc.ActiveView
targetView = views["План1"]
viewRange 			= workPlan.GetViewRange()

def getViewBB(view, startElevation, ) :
	bb = workPlan.get_BoundingBox(None)
	
	bottomElevation 	= doc.GetElement(viewRange.GetLevelId(PlanViewPlane.BottomClipPlane)).Elevation\
								+ viewRange.GetOffset(PlanViewPlane.BottomClipPlane)
	topElevation 		= doc.GetElement(viewRange.GetLevelId(PlanViewPlane.TopClipPlane)).Elevation\
								+ viewRange.GetOffset(PlanViewPlane.TopClipPlane)
	
	bbMin, bbMax = bb.Transform.OfPoint(bb.Min), bb.Transform.OfPoint(bb.Max)
	minPnt = XYZ(bbMin.X, bbMin.Y, bottomElevation)	
	maxPnt = XYZ(bbMax.X, bbMax.Y, topElevation)

	viewSolid 			= dm.minMaxToSolid(minPnt, maxPnt)
	viewBB 				= BoundingBoxXYZ() 
	viewBB.Min 			= bbMin
	viewBB.Max			= bbMax

dmDoc 				= dm.dmDocument(doc)
eshelons = {}
tt1		= time.time()

models 	= dm.dmModels(doc)
model 	= models[doc.PathName]

plan 	= model[0]
print("-")
raise
print("Дальше")
mname = 'D:\\17_Проекты\\000_Примеры\\Тестирование трассировки.rvt'
pname = 'В_Этаж 01_Водопровод_Противопожарный'
with open(r"d:\eshelon.json", "r") as f :
	data = json.load(f)

if doc.PathName in models :
	plans = models[doc.PathName]
else :
	print("Модель не найдена")
	raise
	
if workPlan.Name in plans :
	eDicts = plans[workPlan.Name]



for k in eDicts :
	elevation = float(k)
	eshelons[elevation] = dm.dmSectionLevelCreation(
		doc = doc,
		fromDict = eDicts[k]
	)
	
raise
elPg = geoms.Polygon.Empty
pipePg = geoms.Polygon.Empty
ductPg = geoms.Polygon.Empty
archPg = geoms.Polygon.Empty
wallsPg = geoms.Polygon.Empty

for elevation in sorted(eshelons.keys()) :
	print(elevation)
	try :
		eshelon 	= eshelons[elevation]
	except :
		pass
	try :
		elPg 		= elPg.Union(eshelon.electricalPolygon)
	except :
		pass
	try :
		pipePg 		= pipePg.Union(eshelon.pipePolygon)
	except :
		pass
	try :
		ductPg 		= ductPg.Union(eshelon.ductPolygon)
	except :
		pass
	try :
		archPg 		= archPg.Union(eshelon.archPolygon)
	except :
		pass
	try :
		wallsPg 	= wallsPg.Union(eshelon.wallsPolygon)
	except :
		pass
	
dm.drawPolygonAsFilledRegion(elPg.Buffer(1*dut).Buffer(-1*dut), doc, workPlan)
dm.drawPolygonAsFilledRegion(ductPg.Buffer(1*dut).Buffer(-1*dut), doc, workPlan)
dm.drawPolygonAsFilledRegion(pipePg.Buffer(1*dut).Buffer(-1*dut), doc, workPlan)
#dm.drawPolygonAsFilledRegion(archPg.Buffer(1*dut).Buffer(-1*dut), doc, workPlan)
dm.drawPolygonAsFilledRegion(wallsPg.Buffer(1*dut).Buffer(-1*dut), doc, workPlan)
dm.drawPolygonAsFilledRegion(eshelon.eshelonPolygon.Buffer(1*dut).Buffer(-1*dut), doc, workPlan)

	
	





tt2 = time.time()

print("Время выполнения {}".format(tt2-tt1))



	