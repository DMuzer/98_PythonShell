# Построение эшелонов и запись в БД
import clr
from Autodesk.Revit import DB, UI
import System, sys
from imp import reload
import time
import json
dut = 0.0032808398950131233
refLocations = []
for assembly in clr.References :
	refLocations.append(assembly.Location)
bufsPath = r"C:\Users\Дмитрий\System.Buffers.4.4.0\lib\netstandard2.0\System.Buffers.dll"
if not bufsPath in refLocations :
	clr.AddReferenceToFileAndPath(bufsPath)
ntsPath = r"C:\Users\Дмитрий\nettopologysuite.2.5.0\lib\netstandard2.0\NetTopologySuite.dll"
if not ntsPath in refLocations :
	clr.AddReferenceToFileAndPath(ntsPath)
	
import NetTopologySuite as nts
#from NetTopologySuite.Geometries import *
import NetTopologySuite.Geometries as geoms

libFolder = r"D:\18_проектирование\98_PythonShell"
if libFolder not in sys.path :
	sys.path.append(libFolder)
	
qs1 = """
            SELECT rowid,
            Plan_code,
                Plan_name,
                Level_name
            FROM PLANS
            WHERE Plan_name = 'Имя плана1';
        """
	
try :
	reload(dm)
	print("Перезагрузка dmFindRoute2 ok")
except Exception as ex :
	print(ex)
	import dmFindRoute2 as dm
	print("импорт dmFindRoute2 ok")
	#raise
	
libFolder2 = r"D:\18_проектирование\pyRevitExtension\DMuzer.extension\lib"
if libFolder2 not in sys.path :
	sys.path.append(libFolder2)
	
try :
	reload(dm2)
	print("Перезагрузка dmRevitClasses ok")
except Exception as ex :
	print(ex)
	import dmRevitClasses as dm2
	print("импорт dmRevitClasses ok")
	
try :
	reload(dm3)
	print("Перезагрузка dm_connect_2 ok")
except Exception as ex :
	print(ex)
	import dm_connect_2 as dm3
	print("импорт dm_connect_2 ok")
	#raise
	
	
def drawPolygonAsFilledRegion(pg) :
	tr = None
	if not tr :
		tr = Transaction(doc, "create filled region")
		tr.Start()
		
	cls = dm3.get_CurveLoopsFromPolygon(pg)
	try :
		fr = FilledRegion.Create(doc, typeId, uidoc.ActiveView.Id, cls)
	except Exception as ex:
		print(ex)
		pg = pg.Buffer(-20 * dut).Buffer(20 * dut)
		cls = dm3.get_CurveLoopsFromPolygon(pg)
		fr = FilledRegion.Create(doc, typeId, uidoc.ActiveView.Id, cls)
		pass
		
	
	if tr : tr.Commit()
	return fr
	

excludeIds = [8900694, 2613213, 2613847, 2613883, 2613919, 2613955, 2613991, 2614027,
	2614063, 2614099, 2626423, 2630012, 2632819, 2638570, 2639485, 2640400, 2648760, 2711124, 2711469,
	3101063, 3101385, 3101744,  3101806, 3101883, 3102562,  3102612, 3103138, 3865769 ]
typeId = ElementId(6036810)
views = {v.Name : v  for v in FilteredElementCollector(doc).OfClass(View).ToElements()}
#workPlan = views["Р_ВПВ_Транзиты Этаж -2 E1-E2-E3 3200-3380"]
workPlan = views["В_Этаж 01_Водопровод_Противопожарный"]
#workPlan = uidoc.ActiveView
targetView = views["План1"]
viewRange 			= workPlan.GetViewRange()

def getViewBB(view, startElevation, ) :
	bb = workPlan.get_BoundingBox(None)
	
	bottomElevation 	= doc.GetElement(viewRange.GetLevelId(PlanViewPlane.BottomClipPlane)).Elevation\
								+ viewRange.GetOffset(PlanViewPlane.BottomClipPlane)
	topElevation 		= doc.GetElement(viewRange.GetLevelId(PlanViewPlane.TopClipPlane)).Elevation\
								+ viewRange.GetOffset(PlanViewPlane.TopClipPlane)
	
	bbMin, bbMax = bb.Transform.OfPoint(bb.Min), bb.Transform.OfPoint(bb.Max)
	minPnt = XYZ(bbMin.X, bbMin.Y, bottomElevation)	
	maxPnt = XYZ(bbMax.X, bbMax.Y, topElevation)

	viewSolid 			= dm.minMaxToSolid(minPnt, maxPnt)
	viewBB 				= BoundingBoxXYZ() 
	viewBB.Min 			= bbMin
	viewBB.Max			= bbMax

dmDoc 				= dm.dmDocument(doc)

tt1		= time.time()

solids 		= []
elements 	= []

	
opt = Options()

eshelons = {}
eDicts = {}
viewRange 			= workPlan.GetViewRange()
bottomElevation 	= workPlan.GenLevel.Elevation 
centerElevation = bottomElevation + 2650 * dut
height = 180 * dut	
print("цикл")

tr = Transaction(doc, "1")
tr.Start()
for i in range(0,2) :

	centerElevation = bottomElevation +  2600* dut + 25 * i	* dut
	levelElevation = round((centerElevation - bottomElevation) / dut)
	print(levelElevation)
	#if centerElevation / dut > 4000 : break
	eshelon = dm.dmSectionLevelCreation(
		doc = doc,
		centerElevation = centerElevation,
		height = height,
		view = workPlan
		)
	eshelons[centerElevation] = eshelon
		
	pg 			= geoms.Polygon.Empty
	pgDuct 		= eshelon.calcDuctPolygon()
	
	pgPipe 		= eshelon.calcPipePolygon()
	pgElectrical = eshelon.calcElectricalPolygon()
	pgArch 		= eshelon.calcArchPolygon()
	
	#pg 			= pgDuct.Union(pgPipe).Union(pgElectrical).Union(pgArch)
	#pg = pgArch
	pg 			= pgDuct.Union(pgPipe).Union(pgElectrical).Union(pgArch).Buffer(-2*dut).Buffer(4*dut).Buffer(-2*dut)
	pg 			= pg.Buffer(150 * dut)
	
	#print(i)
	
	ds = dm.create_ds_safe(pg, doc)
	
	ds.Location.Move(XYZ(0,0, centerElevation))
	
	#ds2 = eshelon.showEshelonSolid()
	
		
	
		
	#dm.drawPolygonAsFilledRegion(
	#	eshelon.eshelonPolygon, 
	#	doc, 
	#	targetView
	#	)
		
	#dm.create_ds(eshelon.eshelonSolid, doc)
	#eDicts[centerElevation] = eshelon.makeDict()
	
	eshelon.writeToDb()

tr.Commit()
tt2 = time.time()
print("Время выполнения {}".format(tt2-tt1))
raise


	
	




	