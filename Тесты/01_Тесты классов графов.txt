# Стандарный код для импортов
import clr
from Autodesk.Revit import DB, UI
import System, sys
from imp import reload
import time
import json
dut = 0.0032808398950131233
bic = BuiltInCategory
import unittest


refLocations = []
for assembly in clr.References :
	refLocations.append(assembly.Location)

libFolder = r"D:\18_проектирование\98_PythonShell"
if libFolder not in sys.path :
	sys.path.append(libFolder)
	
	
libFolder2 = r"D:\18_проектирование\pyRevitExtension\DMuzer.extension\lib"
if libFolder2 not in sys.path :
	sys.path.append(libFolder2)
import time
	
try :
	reload(dm)
	print("Перезагрузка dmRevitClasses ok")
except Exception as ex :
	print(ex)
	import dmRevitClasses as dm
	print("импорт dmRevitClasses ok")
	

	
class Test1(unittest.TestCase) :
    #@unittest.skip("-")
    def test7(self) :
        G = dm.dmUndirectedGraph(V = (1,2,3,4,5,6,7,8,9,10,11,12),
                   E = ((1,2), 
                       (2,3),(3,4), (2,4), 
                       (3,5), (5,6), (6,7),
                       (7,8), (8,9), (7,9),
                       (8,10), (10,11), (10,12)))
        print(G)
        cycles = G.getCycles()
        self.assertIsInstance(cycles, list)
        self.assertEqual(len(cycles), 2)
        print(cycles)
    #@unittest.skip("-")
    def testCalcCycles(self) :
        print(20*'*')
        print("Вычисление циклов")
        G = dm.dmUndirectedGraph(V = (1, 2, 3 ,4,5,6,7,8,9,10), 
                    E = ((1,2), 
                         (2,3), (3,4), (2,4), 
                         (3,5), (5,6), (5,7),
                            (4,8), (8,9), (8,10)))
        
        cycles = G.getCycles()
        
        self.assertIsInstance(cycles, list)
        
        self.assertSetEqual(set([2,4,3]), set(cycles[0].vertices()) )
        print(cycles)

     
    #@unittest.skip("-") 
    def testPasses(self) :
        G =  dm.dmUndirectedGraph(V = (2, 3 ,4,7,8,9), 
                    E = (
                         (2,3), (3,4), (2,4), 
                         (7,8), (7,9), (8,9),
                            ))
        wfs = G.wfs(2)
        print(wfs)
        
        self.assertSetEqual({2,3,4}, set(wfs))
    #@unittest.skip("-")   
    def testSubGraphs(self) :
        print("testSubGraphs")
        G = dm.dmUndirectedGraph(V = (1, 2, 3 ,4,5,6,7,8,9,10), 
                    E = ((1,2), 
                         (2,3), (3,4), (2,4), 
                         (3,5), (5,6), (5,7),
                            (4,8), (8,9), (8,10)))
        G1 = G.getSubGraph(V = (2,3,4))
        print(G1)
        
        G2 = G.getSubGraph(V = (2,3,4), E = ((2,3), (2,4)))
        print(G2)

        print("testSubGraphs... finish")
        
    #@unittest.skip("-")
    def test1(self) :
        #Создание графов и проверка на наличие вершин и ребер
        G = dm.dmUndirectedGraph(V = (1,2,3,4,5), E = ((1,2), (1,3), (2,3)))
        self.assertSetEqual(set(G.vertices()), {1,2,3,4,5})
        self.assertSetEqual(set(G.edges()), {tuple(set([1,2])), tuple(set([1,3])), tuple(set([2,3]))})
        
        self.assertSetEqual(set(G.neighbors(1)), {2,3})
        
        self.assertIn(1, set(G.vertices()))
        G.removeVertex(1)
        self.assertNotIn(1, set(G.vertices()))
        
        vs = set()
        for e in G.edges() :
            vs = vs.union(e)
        vs2 = vs.difference(set(G.vertices()))
        self.assertSetEqual(vs2, set())
        
    def test2(self) :
        # Тестирование удаления вершин
        G = dm.dmUndirectedGraph(V = (1,2,3,4,5), E = ((1,2), (1,3), (2,3)))
        
        self.assertTrue(G.hasEdge(1,2))
        self.assertTrue(G.hasEdge(2,1))
        
        self.assertTrue(G.hasEdge(3,1))
        self.assertTrue(G.hasEdge(1,3))
        
        self.assertTrue(G.hasEdge(2,3))
        self.assertTrue(G.hasEdge(3,2))
        
        for v in (1,2,3,4,5) :
            self.assertIn(v, G)
            
        G.removeVertex(1)
        self.assertNotIn(1, G)
        
        for v in (2,3,4,5) :
            self.assertIn(v, G)
            
        G.removeVertex(4)
        self.assertNotIn(4, G)
        
        for v in (2,3,5) :
            self.assertIn(v, G)
            
    def test3(self) :
        # Тестирование добавления вершин
        G = dm.dmUndirectedGraph(V = (1,2,3,4,5), E = ((1,2), (1,3), (2,3)))
        
        for v in (1,2,3,4,5) :
            self.assertIn(v, G)
            
        self.assertNotIn(7, G)
        G.addVertex(7)
        self.assertIn(7, G)
        
    def test4(self) :
        #Тестирование добавления ребер
        
        G = dm.dmUndirectedGraph(V = (1,2,3,4,5), E = ((1,2), (1,3), (2,3)))
        
        self.assertNotIn(set((5,4)), set(G.edges()))
        
        self.assertNotIn(5, G.neighbors(4))
        self.assertNotIn(4, G.neighbors(5))
        G.addEdge(5,4)
        
        self.assertTrue(G.hasEdge(5,4))
        self.assertTrue(G.hasEdge(4,5))
        
        print(list(G.neighbors(4)))
        self.assertIn(5, G.neighbors(4))
        self.assertIn(4, G.neighbors(5))
        
        self.assertNotIn(7, G)
        self.assertNotIn(8, G)
        self.assertFalse(G.hasEdge(7,8))
        self.assertFalse(G.hasEdge(8,7))
        
        G.addEdge(7,8)
        
        self.assertIn(7, G)
        self.assertIn(8, G)
        self.assertTrue(G.hasEdge(7,8))
        self.assertTrue(G.hasEdge(8,7))
        self.assertSetEqual({7}, set(G.neighbors(8)))
        self.assertSetEqual({8}, set(G.neighbors(7)))
        
    def test4(self) :
        #Тестирование поисков
        
        G = dm.dmUndirectedGraph(V = (1,2,3,4,5), E = ((1,2), (1,3), (2,3)))
        self.assertTrue(G.hasPath(1,3))
        self.assertFalse(G.hasPath(1,5))
        self.assertFalse(G.hasPath(3,4))
        self.assertFalse(G.hasPath(5,1))
        
        G.addEdge(3,5)
        self.assertTrue(G.hasPath(5,1))
        self.assertTrue(G.hasPath(1,5))
        
    def test5(self) :
        
        G = dm.dmUndirectedGraph(V = (1,2,3,4,5), E = ((1,2), (1,3), (2,3)))
        
              
#unittest.main(exit=False)
tr = unittest.TextTestRunner(stream=sys.stdout)
unittest.main(argv=['first-arg-is-ignored'], exit= False,testRunner=tr)
