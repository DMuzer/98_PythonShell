import clr
import System
from System.Collections.Generic import IList, List

av = uidoc.ActiveView
p1 = uidoc.Selection.PickPoint()
p2 = uidoc.Selection.PickPoint()

section_line = Line.CreateBound(p1, p2)

pm = (p2 + p1) * 0.5

v = p2 - p1

vx = av.RightDirection.DotProduct(v)
vy = av.UpDirection.DotProduct(v)

workingPlane = av.SketchPlane.GetPlane()

if abs(vx) > abs(vy) :
	hor = True
else :
	hor = False

if hor :
	start_p = pm  - 0.5 * abs(vx) * av.RightDirection
	pntStartProjectionUV = workingPlane.Project(start_p)[0]
	pntStartProjection = workingPlane.Origin\
							+ pntStartProjectionUV.U * workingPlane.XVec \
							+ pntStartProjectionUV.V * workingPlane.YVec
							
	pntEndPojection = workingPlane.Project(start_p)[0]
	end_p = pm + 0.5 * abs(vx) * av.RightDirection
	pntEndProjectionUV = workingPlane.Project(end_p)[0]
	pntEndProjection = workingPlane.Origin \
							+ pntEndProjectionUV.U * workingPlane.XVec \
							+ pntEndProjectionUV.V * workingPlane.YVec
else :					
	dimensionLine = Line.CreateBound(start_p, end_p)
	start_p = pm + 0.5 * abs(vy) * av.UpDirection
	pntStartProjectionUV = workingPlane.Project(start_p)[0]
	pntStartProjection = workingPlane.Origin\
							+ pntStartProjectionUV.U * workingPlane.XVec \
							+ pntStartProjectionUV.V * workingPlane.YVec
							
	pntEndPojection = workingPlane.Project(start_p)[0]
	end_p = pm - 0.5 * abs(vy) * av.UpDirection
	pntEndProjectionUV = workingPlane.Project(end_p)[0]
	pntEndProjection = workingPlane.Origin \
							+ pntEndProjectionUV.U * workingPlane.XVec \
							+ pntEndProjectionUV.V * workingPlane.YVec
							
dimensionLine = Line.CreateBound(pntStartProjection, pntEndProjection)
	
	
	
pipesVisibleOnViewFC = FilteredElementCollector(doc, av.Id)\
						.OfClass(Grid)\
						.ToElements()
def minDistance(array, curve) :
	distances = []
	for c1 in array :
		t = clr.Reference[IList[ClosestPointsPairBetweenTwoCurves]](List[ClosestPointsPairBetweenTwoCurves]()) 
		try :
			curve.ComputeClosestPoints(c1, True, False, False, t)
			distances.append(t.Item[0].Distance)
		except :
			p = curve.GetEndPoint(0)
			distances.append(c1.Distance(p))
		
	return min(distances)
				
sectedPipes = []

for pipe in pipesVisibleOnViewFC :
	gcurve = pipe.GetCurvesInView(DatumExtentType.ViewSpecific, uidoc.ActiveView)[0]
	pipeLocationCurve = gcurve
	
	
	pntEnd0, pntEnd1 = pipeLocationCurve.GetEndPoint(0), pipeLocationCurve.GetEndPoint(1)
	newP0UV = workingPlane.Project(pntEnd0)[0]
	newP0 = workingPlane.Origin + newP0UV.U * workingPlane.XVec + newP0UV.V * workingPlane.YVec
	newP1UV = workingPlane.Project(pntEnd1)[0]
	newP1 = workingPlane.Origin + newP1UV.U * workingPlane.XVec + newP1UV.V * workingPlane.YVec
	if newP0.DistanceTo(newP1) < 0.005 : continue
	newLocationCurve = Line.CreateBound(newP0, newP1)
	
	PipeToDimIntersection  = newLocationCurve.Intersect(dimensionLine)
	
	if PipeToDimIntersection == SetComparisonResult.Disjoint :
		continue
		
	sectedPipes.append(pipe)
	
dimReferences = ReferenceArray()
gridToDim = []
for pipe in sectedPipes :
	gridCurve = pipe.GetCurvesInView(DatumExtentType.ViewSpecific, uidoc.ActiveView)[0]
	if len(gridToDim) == 0 or minDistance(gridToDim, gridCurve) > 0.5 :
		gridToDim.append(gridCurve)	
		ref1 = Reference(pipe)
		dimReferences.Append(ref1)
	

def _getDistance(x) :
		t = clr.Reference[IList[ClosestPointsPairBetweenTwoCurves]](List[ClosestPointsPairBetweenTwoCurves]()) 
		try :
			x.ComputeClosestPoints(dimensionLine, True, False, False, t)
			return t.Item[0].XYZPointOnSecondCurve.DistanceTo(dimensionLine.GetEndPoint(0))			
		except :
			return 1000000

	
gridToDim = sorted(sectedPipes, key = _getDistance)

dimReferences2 = ReferenceArray()
dimReferences2.Append(Reference(gridToDim[0]))
dimReferences2.Append(Reference(gridToDim[-1]))
dimensionLine2 = dimensionLine.CreateOffset(5 * av.Scale * 0.003, av.ViewDirection)

#dimensionLine2 = dimensionLine
	
tr = Transaction(doc, "new detail")

tr.Start()
#dim_line = doc.Create.NewDetailCurve(av, dimensionLine)
new_dim = doc.Create.NewDimension(av, dimensionLine, dimReferences)
new_dim2 = doc.Create.NewDimension(av, dimensionLine2, dimReferences2)
dimArray = System.Array[ElementId]([new_dim.Id, new_dim2.Id])
primaryView = doc.GetElement(av.GetPrimaryViewId())
if primaryView :
	for subViewId in primaryView.GetDependentViewIds() :
		if subViewId == av.Id : print("текущий");continue
		subView = doc.GetElement(subViewId)
		subView.HideElements(dimArray)
	
tr.Commit()
						

	
