#Расстановка спринклеров по сетке
from Autodesk.Revit import *
from Autodesk.Revit.DB import *
from contextlib import contextmanager
import math, sys





lib_path = r"D:\18_проектирование\98_PythonShell"
if not lib_path in sys.path :
	sys.path.append(lib_path)


pi2 = math.pi * 2

dut = 0.0032808398950131233

@contextmanager
def trans(doc, a='транзакция') :
	tr = Transaction(doc)
	tr.Start(a)
	try :		
		yield tr
	finally :
		tr.Commit()
	
bic = BuiltInCategory

uidoc = __revit__.ActiveUIDocument
doc = uidoc.Document


def show_var_(v) :
	flds = dir(v)
	print("Доступные поля")
	for f in flds :
		if not f.startswith("__") :
			try :
				print("{:15} : {}".format(f, getattr(v, f)))
			except Exception as ex:
				pass
				
def show_dict(d) :
	print("Содержимое словаря: ")
	for k in  d: 
		print("{} : {}".format(k, d[k]))
	

import dm_connect_2 as dm
reload(dm)

import dm_nearest_geometry as dm1
reload(dm1)
#ng = dm1.dm_Nearest_Geometry([bic.OST_Floors, bic.OST_Roofs])

bic = BuiltInCategory

uidoc = __revit__.ActiveUIDocument
doc = uidoc.Document


#dm.connect_sprinkler_man()

#__window__.Close()

id = bic = BuiltInCategory

uidoc = __revit__.ActiveUIDocument
doc = uidoc.Document

geom = None
def get_sprinkler_lines(id) :
	if type(id) == int :
		print("передан целое {}".format(id))
		el = doc.GetElement(ElementId(id))
	elif type(id) == ElementId :
		print("передан id {}".format(id))
		el = doc.GetElement(id)
	else :
		print("передан элемент {}".format(id))
		el = id
		
	
		
	g = el.Geometry[Options()]
	global geom
	geom = g
	print(g.IsElementGeometry)
	lines = []
	
	def get_lines(g) :
		lines = []
		#print(type(g))
		if type(g) == GeometryInstance :
			g_ = g.GetInstanceGeometry()
			for g_1 in g_ :
				lines+=get_lines(g_1)
			return lines
		elif type(g) == GeometryElement :
			for g_1 in g :
				lines += get_lines(g_1)
			return lines
			
		elif type(g) == Line :
			return [g]
		else :
			return []
			
	lines = get_lines(g)
			
	return lines
		
			
def get_intersection_points(lines) :
	int_res = clr.Reference[IntersectionResultArray]()
	res = []
	
	for i1 in range(len(lines)-1) :	
		l1 = lines[i1]
		for i2 in range(i1+1, len(lines)) :
			l2 = lines[i2]
			if l1.Direction.IsAlmostEqualTo(l2.Direction) :
				continue
			
			int_res1 = l1.Intersect(l2, int_res)
			
			if int_res1 == SetComparisonResult.Overlap :
				res.append(int_res.Item[0].XYZPoint)
				
	return res
		
			
def get_points_on_net(id) :
	lines = get_sprinkler_lines(id)
	points = get_intersection_points(lines)
	return points

#print("Вот линии\n{}\n{}".format(lines, len(lines)))
	

sts = dm.get_sprinkler_types()
tn = "Вверх свободный в/н"
print(sts[tn])

dist = 120 * dut


ids = uidoc.Selection.GetElementIds()
n_sprs =[]

for id in ids :
	net1 = doc.GetElement(id)
	points = get_points_on_net(net1)
	level = doc.GetElement(net1.LevelId)
	elev = level.Elevation
	

	with trans(doc) :
		
		#lp = XYZ(lp.X, lp.Y, 8000*dut)
		for lp in points :
		  	if lp is None : continue
			lp = XYZ(lp.X, lp.Y, lp.Z)
			
			np1 = ng.nearest(lp)
			p2 = XYZ(lp.X, lp.Y, np1.Z - dist- elev)
			
			
			spr = doc.Create.NewFamilyInstance(
					p2, 
					doc.GetElement(sts[tn]), 
					level,
					Structure.StructuralType.NonStructural					
					)
			n_sprs.append(spr)
	


