"""
***************************************************************
*** СОЗДАНИЕ ТРАССЫ ТРУБЫ, ОГИБАЮЩИЕ НЕРОВНОСТИ ПОТОЛКА
*** И ИНЖЕНЕРНЫЕ СИСТЕМЫ СНИЗУ
***************************************************************
* Огибание трубой потолка
*
***************************************************************
"""
dut = 0.0032808398950131233

view_name = 'DM_ОТМЕТКИ'
margin_rel = False
margin = 200 * dut



from Autodesk.Revit import *
from Autodesk.Revit.DB import *
from contextlib import contextmanager
import math, sys
import clr
import System

clr.AddReferenceToFileAndPath(r"C:\Users\Дмитрий\NetTopologySuite.2.4.0\lib\netstandard2.0\NetTopologySuite.dll")
clr.AddReferenceToFileAndPath(r"C:\Program Files\Autodesk\Revit 2021\RevitAPIIFC.dll")
import NetTopologySuite as nts
import NetTopologySuite.Geometries as nts_geom
from Autodesk.Revit.DB import IFC as ifc

lib_path = r"D:\18_проектирование\98_PythonShell"
if not lib_path in sys.path :
	sys.path.append(lib_path)
	
import dm_connect_2 as dm
import dm_nearest_geometry as dm1

#reload(dm)	
#reload(dm1)


pi2 = math.pi * 2

dut = 0.0032808398950131233


	
bic = BuiltInCategory
bip = DB.Structure.StructuralType
nonstr = bip.NonStructural

uidoc = __revit__.ActiveUIDocument
doc = uidoc.Document


mapp = dm.dmApp(doc)
view = mapp.views[view_name]

from time import time as ftime


m_pipe_ids = uidoc.Selection.GetElementIds()

if len(m_pipe_ids) == 0 :
	m_pipe_ids = uidoc.Selection.PickObjects(UI.Selection.ObjectType.Element)
	



def CreateNewPipeTrace(m_pipe) :
	"""
	***************************************
	* Вычисление трассы которая будет огибать потолок для одной трубы
	* возвращает список с вновь созданными трубами
	***************************************
	"""
	global margin
	
	t1 = ftime()
	lc = m_pipe.Location.Curve
	p1 = lc.GetEndPoint(0)
	d = lc.Direction
	l = lc.Length
	psize = m_pipe.Diameter
	
	mcf = ElementMulticategoryFilter(System.Array[BuiltInCategory](
								[bic.OST_PipeCurves, bic.OST_PipeFitting,
									bic.OST_GenericModel,
								]), True)
	flt = FilteredElementCollector(doc).WherePasses(mcf)
	objs = flt.WhereElementIsNotElementType().ToElements()
	fref_targ = FindReferenceTarget.Element
	ref_int = ReferenceIntersector(mcf, fref_targ, view)
	ref_int.FindReferencesInRevitLinks = True
	
	step = psize * 2
	if margin_rel :
		margin = 2 * psize
	num_steps = int(math.ceil(l /step))
	step = l / num_steps
	print("Количество точек {}".format(num_steps+1))
	z = []
	
	# Вычисляем высоту помещения вдоль траектории трубы
	lines_v = []
	
	for i in range(num_steps+1) :
		vp = p1 + (i * step * d) - XYZ.BasisZ * 1000 * dut
		p2 = ref_int.FindNearest(vp, XYZ.BasisZ)
		if p2 :
			z.append(p2)
			try :
				lines_v.append(Line.CreateBound(vp, p2.GetReference().GlobalPoint))
			except :
				pass
				
	lines_v.append(Line.CreateBound(p1, p1 + XYZ.BasisZ + XYZ.BasisX + XYZ.BasisY))
			
	t2 = ftime()
	
	tt = t2-t1
	print("Время для {}".format(tt))
	
	
	"""
	************************************************************
	# Формирование сегментов
	************************************************************
	"""
	z1 = z
	z = [p.GetReference().GlobalPoint.Z for p in z1]
	pp = [p.GetReference().GlobalPoint for p in z1]
	
	
	"""
	for z_ in z : 
		print("{}\n".format(z_))
		
	"""
	
	p_prev = pp[0]
	s_start = pp[0]
	segments = []
	seg_len = 1
	
	for num, p_ in enumerate(pp[1:]) :
		#print(50*"*")
		#print("Обрабатыванием точку {} высота {} высота предыдущей точки {}".format(num+2, p_.Z/dut, p_prev.Z/dut))
		if abs(p_.Z - s_start.Z) > 1 * psize :
			changed = True
			#print("Переход")
			
			if seg_len > 1 :
				# сегмент получился достаточно длинный, поэтому его добавляем в зависимости от того
				# куда он переходит вверх или вниз
				if p_.Z > s_start.Z :
					#print("Снизу вверх")
					s_end = XYZ(p_.X, p_.Y, s_start.Z)
					segments.append((s_start, s_end))
					s_start = p_
				else :
					#print("Сверху вниз")
					s_end = XYZ(p_prev.X, p_prev.Y, s_start.Z)
					segments.append((s_start, s_end))
					s_start = XYZ(p_prev.X, p_prev.Y, p_.Z)
					
				seg_len = 0
				
			else :
				# если сегмент короткий то его надо исключить и если перепад по сравнению с предыдущим сегментом
				# не большой, то его надо присоединить к предыдущему, либо начать новый
				
				if len(segments) > 0 :
					prev_seg = segments.pop()
					s_start = prev_seg[0]
				else :
					s_start = XYZ(s_start.X, s_start.Y, p_.Z)
					prev_seg = (s_start, p_)
				
					
				if abs(p_.Z - prev_seg[0].Z) < 5 * psize :
					#Перепад не большой и надо присоединить к предыдущему
					seg_len = 2
				elif p_.Z > prev_seg[0].Z :
					# Перепад большой и надо делать новый сегмент и нужен подъем
					s_end= XYZ(p_.X, p_.Y, s_start.Z)
					segments.append((s_start, s_end))
					s_start = p_
					pass
				elif p_.Z < prev_seg[0].Z :
					# Перепад большой и нужен опуск
					pass
					s_end = XYZ(p_prev.X, p_prev.Y, s_start.Z)
					segments.append((s_start, s_end))
					s_start = XYZ(p_prev.X, p_prev.Y, p_.Z)
					
		else :
			changed = False
			#print("Высота не изменилась, двигаемся дальше")		
		p_prev = p_
		seg_len += 1
		
	if not changed :
		p_end = XYZ(p_.X, p_.Y, s_start.Z)
		segments.append((s_start, p_end))
		
	"""
	*********************************************************************
	***** Добавляем стояки к сегментам
	*********************************************************************
	"""
	
	pipe_lines = []
	
	if len(segments) > 1 :
		for s1, s2 in zip(segments[:-1], segments[1:]) :
			p11 = XYZ(s1[0].X, s1[0].Y, s1[0].Z - margin)
			p12 = XYZ(s1[1].X, s1[1].Y, s1[1].Z - margin)
			p21 = XYZ(s2[0].X, s2[0].Y, s2[0].Z - margin)
			p22 = XYZ(s2[1].X, s2[1].Y, s2[1].Z - margin)
			
			l1 = Line.CreateBound(p11, p12)
			l2 = Line.CreateBound(p12, p21)
			
			"""
			***************************************
			* Если стояк слишком короткий - не поместятся отводы,
			* то стояк надо сделать наклонным, и соответственно укоротить 
			* ближайшие сегменты
			*****************************************
			"""
			

			if l2.Length < 3.1 * psize :
				p12 = p12 - l1.Direction * 2 * psize 
				
				l1 = Line.CreateBound(p11, p12)
				l2 = Line.CreateBound(p12, p21)
				

			
			
			
			pipe_lines.extend([l1, l2])
			
		l1 = Line.CreateBound(p21, p22)
		pipe_lines.append(l1)
			
			
	else :
		s1 = segments[0]
		pipe_lines.append(Line.CreateBound(s1[0], s1[1]))
		
	
	
	"""
	**********************************************************************
	***** Формируем трубы
	**********************************************************************
	"""
		
	lines = [Line.CreateBound(p[0], p[1]) for p in segments]
	lines_a = System.Array[GeometryObject](lines+lines_v + pipe_lines)
	
	with dm.trans(doc) :
		#ds = DirectShape.CreateElement(doc, ElementId(bic.OST_GenericModel))
		#ds.SetShape(lines_a)
		pipes = []
		for pl in pipe_lines :
			new_pipe_id = ElementTransformUtils.CopyElement(doc, m_pipe.Id, XYZ.Zero)[0]
			new_pipe = doc.GetElement(new_pipe_id)
			new_pipe.Location.Curve = pl
			pipes.append(new_pipe)
			
		"""
		*****************************************
		* Соединяем трубы отводами
		*****************************************
		"""
		if len(pipes) > 1 :
			for pipe1, pipe2 in zip(pipes[:-1], pipes[1:]) :
				p0 = pipe1.Location.Curve.GetEndPoint(1)
				c1 = dm.get_nearest_end_connector(pipe1, p0)
				c2 = dm.get_nearest_end_connector(pipe2, p0)
				doc.Create.NewElbowFitting(c1, c2)
				
	return pipes
				


new_traces = {}
for m_pipe_id in m_pipe_ids :
	try :
		m_pipe = doc.GetElement(m_pipe_id)
		if type(m_pipe) != Plumbing.Pipe : continue
		res = CreateNewPipeTrace(m_pipe)
		
		new_traces[m_pipe_id] = res
	except Exception as ex :
		print(ex)
		raise

		
__window__.Close()